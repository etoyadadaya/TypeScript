// main class for work with methods by state
class DocumentItem {
    public text: string;
    private state: DocumentItemState;

    constructor() {
        this.setState(new DraftDocumentItemState());
    }

    getState() {
        return this.state;
    }

    setState(state: DocumentItemState) {
        this.state = state;
        this.state.setContext(this);
    }

    publishDoc() {
        this.state.publish();
    }

    deleteDoc() {
        this.state.delete();
    }
}

// interface to the family of classes generated by it
abstract class DocumentItemState {
    public name: string;
    public item: DocumentItem

    // adding context to state
    public setContext(item: DocumentItem) {
        this.item = item;
    }

    public abstract publish(): void;
    public abstract delete(): void;
}

// draft document item state is includes all logic
class DraftDocumentItemState extends DocumentItemState {
    constructor() {
        super();
        this.name = 'DraftDocument';
    }

    // article publish and switch to publish state
    publish(): void {
        console.log(`${this.item.text} was send on site`);
        this.item.setState(new PublishDocumentItemState());
    }

    // article deletion
    delete(): void {
        console.log('document deleted');
    }
}

// publish document item state is includes all logic
class PublishDocumentItemState extends DocumentItemState {
    constructor() {
        super();
        this.name = 'PublishDocument';
    }

    // article deletion and switch to draft state
    delete(): void {
        console.log('deleted');
        this.item.setState(new DraftDocumentItemState());
    }

    // for the same articles
    publish(): void {
        console.log('cannot upload uploaded document');
    }
}

// creating new article
const item = new DocumentItem();

// adding some text
item.text = 'My post!';

// get state of article
console.log(item.getState());

// article publish
item.publishDoc();

// get state of article
console.log(item.getState());

// same article publish
item.publishDoc();

// article deletion
item.deleteDoc();

// get state of article
console.log(item.getState());

/*
     <ref *1> DraftDocumentItemState {
          name: 'DraftDocument',
          item: DocumentItem { state: [Circular *1], text: 'My post!' }
     }
     My post! was send on site
     <ref *1> PublishDocumentItemState {
         name: 'PublishDocument',
         item: DocumentItem { state: [Circular *1], text: 'My post!' }
     }
     cannot upload uploaded document
     deleted
     <ref *1> DraftDocumentItemState {
         name: 'DraftDocument',
         item: DocumentItem { state: [Circular *1], text: 'My post!' }
    }
 */
